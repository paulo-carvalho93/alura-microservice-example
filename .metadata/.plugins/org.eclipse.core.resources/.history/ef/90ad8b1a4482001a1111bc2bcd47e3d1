package br.com.restaurante.pagamentoservice.controller;

import java.net.URI;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;
import org.springframework.web.util.UriComponentsBuilder;

import br.com.restaurante.pagamentoservice.PedidoRestClient;
import br.com.restaurante.pagamentoservice.model.Pagamento;
import br.com.restaurante.pagamentoservice.model.PagamentoDTO;
import br.com.restaurante.pagamentoservice.repository.PagamentoRepository;
import br.com.restaurante.pagamentoservice.service.NotificacaoPagamentoConfirmado;

@RestController
@RequestMapping("/pagamentos")
public class PagamentoController {
	
	@Autowired
	private PagamentoRepository pagamentoRepository;
	private PedidoRestClient pedidoClient;
	private NotificacaoPagamentoConfirmado pagamentoConfirmado;
	
	
	@RequestMapping(value = "/salvar", method = RequestMethod.POST)
	public ResponseEntity<PagamentoDTO> salvar(Pagamento pagamento, UriComponentsBuilder uriBuilder) {
		pagamento.setStatus(Pagamento.Status.CRIADO);
		Pagamento salvo = pagamentoRepository.save(pagamento);
		URI path = uriBuilder.path("/pagamentos/{id}").buildAndExpand(salvo.getId()).toUri();
		return ResponseEntity.created(path).body(new PagamentoDTO(salvo));
	}
	
	@RequestMapping(value = "/confirmar/{id}", method = RequestMethod.PUT)
	public PagamentoDTO confirmar(@PathVariable("id") Long id) {
		Pagamento pagamento = pagamentoRepository.findById(id).orElse(new Pagamento());
		pagamento.setStatus(Pagamento.Status.CONFIRMADO);
		pagamentoRepository.save(pagamento);
		
		pagamentoConfirmado.notificaPagamentoConfirmado(pagamento);
		
		Long pedidoId = pagamento.getPedidoId();
	    pedidoClient.pedidoPago(pedidoId);
	    
		return new PagamentoDTO	(pagamento);

	}

}
